version: "3.8"

services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    container_name: flashcard-postgres
    environment:
      POSTGRES_DB: flashcards
      POSTGRES_USER: flashcard_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-flashcard_password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - flashcard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flashcard_user -d flashcards"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    container_name: flashcard-backend
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://flashcard_user:${POSTGRES_PASSWORD:-flashcard_password}@postgres:5432/flashcards
      
      # API Keys (use Azure Key Vault in production)
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      
      # JWT Configuration
      SECRET_KEY: ${JWT_SECRET_KEY}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # OAuth Configuration
      APPLE_CLIENT_ID: ${APPLE_CLIENT_ID}
      APPLE_CLIENT_SECRET: ${APPLE_CLIENT_SECRET}
      
      # Application Configuration
      ENVIRONMENT: ${ENVIRONMENT:-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      CORS_ORIGINS: ${CORS_ORIGINS:-https://your-frontend-domain.azurecontainerapps.io}
      
      # Azure Specific
      AZURE_STORAGE_CONNECTION_STRING: ${AZURE_STORAGE_CONNECTION_STRING}
      AZURE_KEY_VAULT_URL: ${AZURE_KEY_VAULT_URL}
      
      # Python Configuration
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - uploads_data:/app/uploads
      - app_logs:/app/logs
    networks:
      - flashcard-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
      target: production
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-https://your-backend-domain.azurecontainerapps.io}
        REACT_APP_ENVIRONMENT: ${ENVIRONMENT:-production}
    container_name: flashcard-frontend
    environment:
      NODE_ENV: production
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    networks:
      - flashcard-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache Service (Optional for session storage)
  redis:
    image: redis:7-alpine
    container_name: flashcard-redis
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - flashcard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}

  # Nginx Reverse Proxy (Optional for local testing)
  nginx:
    image: nginx:alpine
    container_name: flashcard-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - flashcard-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    profiles:
      - local-proxy

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  app_logs:
    driver: local

networks:
  flashcard-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
